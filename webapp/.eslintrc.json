// https://www.npmjs.com/package/eslint-config-airbnb-typescript
// https://github.com/iamturns/create-exposed-app/blob/master/.eslintrc.js
{
  "extends": [
    "eslint:recommended",
    "airbnb-base",
    "plugin:promise/recommended",
    "plugin:import/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:security/recommended",
    "prettier",
    "plugin:prettier/recommended"
  ],
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": 2020,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true,
      "impliedStrict": true,
      "modules": true,
      "experimentalObjectRestSpread": true
    }
  },
  "parser": "@typescript-eslint/parser",
  "plugins": ["react", "import", "babel", "react-hooks", "promise", "react", "compat", "security", "prettier"],
  "env": {
    "browser": true,
    "commonjs": true,
    "jquery": true,
    "es2021": true,
    "node": true
  },
  "settings": {
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json"
      }
    },
    "react": {
      // https://github.com/yannickcr/eslint-plugin-react#configuration
      "createClass": "createReactClass",
      "pragma": "React",
      "fragment": "Fragment",
      "version": "detect"
    }
  },
  "overrides": [
    {
      // only for tests
      "files": ["tests/**", "*.test.*"],
      "env": {
        "jest": true,
        "jest/globals": true
      },
      "plugins": ["jest", "jest-dom", "testing-library"],
      "extends": ["plugin:jest/all", "plugin:jest-dom/recommended", "plugin:testing-library/react"],
      "rules": {
        "prettier/prettier": "error",
        "@typescript-eslint/no-var-requires": 0,
        "@typescript-eslint/no-explicit-any": 0,
        "@typescript-eslint/no-non-null-assertion": 0,
        "@typescript-eslint/ban-types": 0,
        "react-hooks/exhaustive-deps": 0,
        "no-console": 2,
        "import/extensions": 0,
        "jest/require-top-level-describe": 0,
        "jest/prefer-expect-assertions": 0
      }
    },
    {
      // only for typescript files
      "files": ["**/*.{ts,tsx}"],
      "excludedFiles": ["tests/**", "**/*.test.*"],
      "extends": [
        "airbnb-typescript",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:import/typescript",
        "plugin:prettier/recommended"
      ],
      "plugins": ["@typescript-eslint"],
      "rules": {
        "prettier/prettier": "error",
        "arrow-body-style": "off",
        "prefer-arrow-callback": "off",
        "func-style": "warn",
        "import/no-default-export": "off",
        "import/no-unresolved": "warn",
        "import/prefer-default-export": "off",
        "import/no-cycle": "off",
        "import/named": "off",
        "import/extensions": "off",
        "import/no-mutable-exports": "off",
        "import/no-dynamic-require": "off",
        "import/no-extraneous-dependencies": "off",
        "import/no-named-as-default": "off",
        "import/order": [
          "error",
          {
            "newlines-between": "always-and-inside-groups",
            "groups": ["builtin", "external", ["internal", "parent"], "sibling", "index"]
          }
        ],
        "eqeqeq": [2, "smart"],
        "promise/catch-or-return": 0,
        "promise/always-return": 0,
        "no-unused-vars": "off",
        "@typescript-eslint/no-unsafe-argument": "warn",
        "@typescript-eslint/default-param-last": "warn",
        "@typescript-eslint/no-unused-expressions": ["error", { "allowTernary": true, "allowShortCircuit": true }],
        "@typescript-eslint/no-unnecessary-type-constraint": "warn",
        "@typescript-eslint/no-implied-eval": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/restrict-plus-operands": "off",
        "@typescript-eslint/unbound-method": "off",
        "@typescript-eslint/no-floating-promises": ["warn", { "ignoreVoid": true }],
        "@typescript-eslint/require-await": "warn",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-misused-promises": "warn",
        "@typescript-eslint/await-thenable": "warn",
        "@typescript-eslint/prefer-regexp-exec": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          // Eslint rule
          // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/naming-convention.md

          // Ts/Airbnb default
          // https://github.com/iamturns/eslint-config-airbnb-typescript/blob/master/lib/shared.js
          {
            "selector": "variable",
            "leadingUnderscore": "allow",
            "trailingUnderscore": "allow",
            "format": ["camelCase", "PascalCase", "UPPER_CASE"]
          },
          // Allow camelCase functions (23.2), and PascalCase functions (23.8)
          {
            "selector": "function",
            "format": ["camelCase", "PascalCase"]
          },
          // Airbnb recommends PascalCase for classes (23.3), and although Airbnb does not make TypeScript recommendations, we are assuming this rule would similarly apply to anything "type like", including interfaces, type aliases, and enums
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          // Allow UPPER_CASE for enums (custom rule, may be removed in the future)
          {
            "selector": "enum",
            "format": ["PascalCase", "UPPER_CASE"]
          }
        ],
        "func-names": ["warn", "as-needed"],
        "no-plusplus": ["warn", { "allowForLoopAfterthoughts": true }],
        "no-unused-expressions": ["error", { "allowTernary": true, "allowShortCircuit": true }],
        // Off due to redux slice
        "no-param-reassign": "off",
        "no-underscore-dangle": ["off", { "enforceInMethodNames": false }],
        "no-bitwise": "off",
        "class-methods-use-this": "off",
        "prefer-promise-reject-errors": "warn",
        "no-console": ["error", { "allow": ["warn", "error", "debug"] }],
        "camelcase": [
          "error",
          {
            "allow": ["file_id", "status_code"]
          }
        ],
        "no-use-before-define": "off",
        "prefer-destructuring": ["warn", { "object": true, "array": false }],
        "no-restricted-syntax": "warn",
        "global-require": "warn",
        "no-implied-eval": "off",
        "react/destructuring-assignment": "off",
        "react/no-unused-prop-types": "off",
        "react/no-access-state-in-setstate": "error",
        "react/state-in-constructor": "error",
        "react/no-array-index-key": "off",
        "react/jsx-pascal-case": "off",
        "react/jsx-filename-extension": "off",
        "react/no-did-update-set-state": "warn",
        "react/button-has-type": "warn",
        "react/require-default-props": "off",
        "react/jsx-props-no-spreading": "off",
        "jsx-a11y/anchor-is-valid": "off",
        "react/prop-types": 0,
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": ["block-like", "if"],
            "next": "if"
          }
        ]
      }
    }
  ]
}
